version: 2.1

orbs:
  python: circleci/python@2.0.3
  aws-cli: circleci/aws-cli@4.1.2
  ansible-playbook: orbss/ansible-playbook@0.0.5
  ruby: circleci/ruby@2.1.0

jobs:
  cfn-lint:
    executor: python/default
    steps:
      - checkout
      - run: pip install cfn-lint
      - run:
          name: run cfn-lint
          command: |
            cfn-lint -i W3002 -t cloudformation/*.yml

  execute-cloudformation:
    executor: aws-cli/default
    steps:
      - checkout
      - aws-cli/setup:
          aws_access_key_id: AWS_ACCESS_KEY_ID
          aws_secret_access_key: AWS_SECRET_ACCESS_KEY
          region: AWS_DEFAULT_REGION
      - run:
          name: cloudformation deploy
          command: |
            aws cloudformation deploy --template-file cloudformation/cfn-Network-Layer.yml --stack-name test-nw
            aws cloudformation deploy --template-file cloudformation/cfn-Security-Layer.yml --stack-name test-sg --capabilities CAPABILITY_NAMED_IAM
            aws cloudformation deploy --template-file cloudformation/cfn-Application-Layer.yml --stack-name test-ap
            aws cloudformation describe-stacks --stack-name test-ap --query 'Stacks[].Outputs[0].OutputValue' --output text > /tmp/AWS_ALB_HOST.txt
            aws cloudformation describe-stacks --stack-name test-ap --query 'Stacks[].Outputs[1].OutputValue' --output text > /tmp/AWS_DB_HOST.txt
            aws cloudformation describe-stacks --stack-name test-ap --query 'Stacks[].Outputs[2].OutputValue' --output text > /tmp/AWS_AP_HOST.txt
            aws cloudformation describe-stacks --stack-name test-ap --query 'Stacks[].Parameters[1].ParameterValue' --output text > /tmp/AWS_DB_USER.txt
            aws ssm get-parameters --query Parameters[].Value --output text --name raisetech-rds-password --with-decryption > /tmp/AWS_DB_PW.txt
      - persist_to_workspace:
          root: /tmp
          paths: AWS*

  execute-ansible:
    executor: ansible-playbook/default
    steps:
      - checkout
      - attach_workspace:
          at: /tmp
      - run:
          name: set-environmental-variables
          command: |
            echo "export AWS_ALB_HOST=$(cat /tmp/AWS_ALB_HOST.txt)" >> $BASH_ENV
            echo "export AWS_AP_HOST=$(cat /tmp/AWS_AP_HOST.txt)" >> $BASH_ENV
            echo "export AWS_DB_HOST=$(cat /tmp/AWS_DB_HOST.txt)" >> $BASH_ENV
            echo "export AWS_DB_USER=$(cat /tmp/AWS_DB_USER.txt)" >> $BASH_ENV
            echo "export AWS_DB_PW=$(cat /tmp/AWS_DB_PW.txt)" >> $BASH_ENV
      - run:
          name: set-ssh-config
          command: |
            echo -e "Host server\n  HostName ${AWS_AP_HOST}\n  User ec2-user\n  Port 22\n  IdentityFile ~/.ssh/id_rsa\n  StrictHostKeyChecking no" > ~/.ssh/config
      - ansible-playbook/install:
          version: 2.10.7
      - add_ssh_keys:
          fingerprints:
            - "bd:f9:12:00:b8:2a:b3:78:88:83:6f:a0:02:d5:f1:83"
      - ansible-playbook/playbook:
          playbook: ansible/playbook.yml
          playbook-options: '-i ansible/inventory'

  execute-serverspec:
    executor: ruby/default
    steps:
      - checkout
      - attach_workspace:
          at: /tmp
      - run:
          name: set-environmental-variables
          command: |
            echo "export TARGET_HOST=server" >> $BASH_ENV
            echo "export AWS_AP_HOST=$(cat /tmp/AWS_AP_HOST.txt)" >> $BASH_ENV
      - run:
          name: set-ssh-config
          command: |
            echo -e "Host ${TARGET_HOST}\n  HostName ${AWS_AP_HOST}\n  User ec2-user\n  Port 22\n  IdentityFile ~/.ssh/id_rsa\n  StrictHostKeyChecking no" > ~/.ssh/config
      - ruby/install:
          version: '3.1.2'
      - ruby/install-deps:
          app-dir: serverspec
      - run:
          name: execute serverspec
          command: |
            cd serverspec
            bundle exec rake spec

workflows:
  raisetech:
    jobs:
      - cfn-lint
      - execute-cloudformation:
          requires:
            - cfn-lint
      - execute-ansible:
          requires:
            - execute-cloudformation
      - execute-serverspec:
          requires:
            - execute-ansible